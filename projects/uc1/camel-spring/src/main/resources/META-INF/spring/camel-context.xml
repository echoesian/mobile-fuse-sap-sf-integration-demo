<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:salesforce.properties</value>
		</property>
	</bean>
	<bean id="salesforce"
		class="org.apache.camel.component.salesforce.SalesforceComponent">

		<property name="loginConfig">
			<bean class="org.apache.camel.component.salesforce.SalesforceLoginConfig">
				<property name="loginUrl" value="${loginUrl}"></property>
				<property name="userName" value="${userName}"></property>
				<property name="password" value="${password}"></property>
				<property name="clientId" value="${clientId}"></property>
				<property name="clientSecret" value="${clientSecret}"></property>
			</bean>
		</property>
		<property name="config">
			<bean
				class="org.apache.camel.component.salesforce.SalesforceEndpointConfig">
				<property name="sObjectName" value="${sObjectName}"></property>
				<property name="sObjectClass" value="${sObjectClass}"></property>
			</bean>
		</property>
		<property name="packages" value="${sObjectDTOPackages}"></property>
	</bean>
	 	<bean id="sap" class="org.fusesource.camel.component.sap.SAPComponent">
 		<property name="destinationDataStore">
 			<map>
 				<entry key="NPL" value-ref="nplDestinationData" />
 			</map>
 		</property>
 		<property name="serverDataStore">
 			<map />
 		</property>
 		<property name="repositoryDataStore">
 			<map />
 		</property>
 	</bean>

 	<bean id="nplDestinationData" class="org.fusesource.camel.component.sap.model.rfc.impl.DestinationDataImpl">
 		<property name="ashost" value="52.1.39.181" />
 		<property name="sysnr" value="00" />
 		<property name="client" value="001" />
 		<property name="user" value="developer" />
 		<property name="passwd" value="Redhat11" />
 		<property name="lang" value="en" />
 	</bean>
 	

	<camelContext xmlns="http://camel.apache.org/schema/spring">
	
	<dataFormats>
    	<xmljson id="xmljson"/>
    	<xmljson id="xmljsonWithOptions" forceTopLevelObject="true" trimSpaces="true" rootName="newRoot" skipNamespaces="true" 
             removeNamespacePrefixes="true" expandableProperties="d e"/>
	</dataFormats>
	
    <route id="sfRoute">
        <!--   from uri="timer://foo?repeatCount=0"/> -->
        <from uri="salesforce:CamelTest?notifyForFields=ALL&amp;notifyForOperations=ALL&amp;sObjectName=Opportunity&amp;updateTopic=true&amp;sObjectQuery=SELECT Id, Name, StageName, AccountId FROM Opportunity"/>
        <convertBodyTo type="java.lang.String"/>
        <unmarshal ref="xmljson"/>
        <log message="Query result back from Salesforce: ${body}"/>
		<choice>
            <when>
                <xpath>/o/StageName='Closed Won'</xpath>
                <to uri="sap:destination:NPL:BAPI_FLCUST_CREATEFROMDATA?transacted=true" />
        		<to uri="sap:destination:NPL:BAPI_FLCUST_GETLIST" />
 				<to uri="log:sapintegration?level=INFO" />
 				<to uri="file:target?fileName=BAPI_FLCUST_GETLIST.xml" />
            </when>
            <otherwise>
                <to uri="log:otherwise display" />
            </otherwise>
        </choice>
    </route>
</camelContext>
</beans>
